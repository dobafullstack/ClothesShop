{"ast":null,"code":"import * as actionTypes from \"../constants/auth.constant\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { toast } from \"react-toastify\";\nimport { AppContext } from \"../../contexts/AppProvider\";\nimport { useContext } from \"react\";\nexport const login = (username, password) => {\n  var _s = $RefreshSig$();\n\n  return _s(async (dispatch, getState) => {\n    _s();\n\n    const {\n      setIsLogin\n    } = useContext(AppContext);\n\n    try {\n      const {\n        data\n      } = await axios.post(\"/auth/login\", {\n        username,\n        password\n      });\n      console.log(data);\n      dispatch({\n        type: actionTypes.LOGIN_REQUIRED\n      });\n      dispatch({\n        type: actionTypes.LOGIN_SUCCESS,\n        payload: {\n          accessToken: data.accessToken\n        }\n      });\n      setIsLogin(true);\n      localStorage.setItem(\"accessToken\", JSON.stringify(getState().auth.accessToken));\n    } catch (e) {\n      dispatch({\n        type: actionTypes.LOGIN_FAIL,\n        payload: {\n          message: e.response.data.message\n        }\n      });\n      setIsLogin(false);\n      toast.error(e.response.data.message);\n    }\n\n    return JSON.stringify(getState().auth.accessToken);\n  }, \"Qb72XBwuzL5AbLNxb3wNtH9UlyA=\");\n};","map":{"version":3,"sources":["E:/Web/ReactJS/ClothesShop/frontend/src/redux/actions/auth.action.js"],"names":["actionTypes","axios","jwt_decode","toast","AppContext","useContext","login","username","password","dispatch","getState","setIsLogin","data","post","console","log","type","LOGIN_REQUIRED","LOGIN_SUCCESS","payload","accessToken","localStorage","setItem","JSON","stringify","auth","e","LOGIN_FAIL","message","response","error"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,4BAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SAASC,UAAT,QAA2B,OAA3B;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX;AAAA;;AAAA,YAAwB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAAA;;AACvE,UAAM;AAAEC,MAAAA;AAAF,QAAiBN,UAAU,CAACD,UAAD,CAAjC;;AAEA,QAAI;AACA,YAAM;AAAEQ,QAAAA;AAAF,UAAW,MAAMX,KAAK,CAACY,IAAN,CAAW,aAAX,EAA0B;AAC7CN,QAAAA,QAD6C;AAE7CC,QAAAA;AAF6C,OAA1B,CAAvB;AAKAM,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAH,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,WAAW,CAACiB;AADb,OAAD,CAAR;AAIAR,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,WAAW,CAACkB,aADb;AAELC,QAAAA,OAAO,EAAE;AACLC,UAAAA,WAAW,EAAER,IAAI,CAACQ;AADb;AAFJ,OAAD,CAAR;AAMAT,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEAU,MAAAA,YAAY,CAACC,OAAb,CACI,aADJ,EAEIC,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBL,WAA/B,CAFJ;AAIH,KAxBD,CAwBE,OAAOM,CAAP,EAAU;AACRjB,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,WAAW,CAAC2B,UADb;AAELR,QAAAA,OAAO,EAAE;AACLS,UAAAA,OAAO,EAAEF,CAAC,CAACG,QAAF,CAAWjB,IAAX,CAAgBgB;AADpB;AAFJ,OAAD,CAAR;AAMAjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAR,MAAAA,KAAK,CAAC2B,KAAN,CAAYJ,CAAC,CAACG,QAAF,CAAWjB,IAAX,CAAgBgB,OAA5B;AACH;;AAED,WAAOL,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBL,WAA/B,CAAP;AACH,GAvCoB;AAAA,CAAd","sourcesContent":["import * as actionTypes from \"../constants/auth.constant\";\r\nimport axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { toast } from \"react-toastify\";\r\nimport { AppContext } from \"../../contexts/AppProvider\";\r\nimport { useContext } from \"react\";\r\n\r\nexport const login = (username, password) => async (dispatch, getState) => {\r\n    const { setIsLogin } = useContext(AppContext);\r\n\r\n    try {\r\n        const { data } = await axios.post(\"/auth/login\", {\r\n            username,\r\n            password,\r\n        });\r\n\r\n        console.log(data);\r\n\r\n        dispatch({\r\n            type: actionTypes.LOGIN_REQUIRED,\r\n        });\r\n\r\n        dispatch({\r\n            type: actionTypes.LOGIN_SUCCESS,\r\n            payload: {\r\n                accessToken: data.accessToken,\r\n            },\r\n        });\r\n        setIsLogin(true);\r\n\r\n        localStorage.setItem(\r\n            \"accessToken\",\r\n            JSON.stringify(getState().auth.accessToken)\r\n        );\r\n    } catch (e) {\r\n        dispatch({\r\n            type: actionTypes.LOGIN_FAIL,\r\n            payload: {\r\n                message: e.response.data.message,\r\n            },\r\n        });\r\n        setIsLogin(false);\r\n        toast.error(e.response.data.message);\r\n    }\r\n\r\n    return JSON.stringify(getState().auth.accessToken);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}